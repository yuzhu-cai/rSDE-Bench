{
  "DemandAnalysis": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "ChatDev has made products in the following form before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas, via .html files.",
      "Application: can implement visualized game, software, tool, etc, via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas, with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and the product should be realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task and some creative brainstorm ideas listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Ideas: \"{ideas}\".",
      "We have decided to complete the task through a executable software implemented via a programming language. ",
      "As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
    ]
  },
  "InitialCoding": {
    "assistant_role_name": "SimpleProgrammer",
    "user_role_name": "SimpleSystemer",
    "phase_prompt": [
      "Task: \"{task}\".",
      "You will start with the \"main\" file. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code: {gui}",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```"
    ]
  },
  "RequirementAnalysis": {
    "assistant_role_name": "Chief Technology Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Task description: \"{description}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Source Codes: \"{codes}\"",
      "According to these imformation, please analyze the task and source code.",
      "First, think step by step and reason yourself to check if each requirement is achieved.",
      "Then, identify the unachieved or those need to be double-checked functionalities to achieve the project goals.",
      "Finally, formulate the core software requirements that directly address the minimum essential functionalities needed to achieve the project goals.",
      "Your answer should also follow the format below \"<INFO> *\" where \"*\" represents the requirement, \"achieved\" represents whether the requirement has been achieved, and \"double-checked\" represents whether the requirement has been double-checked. The detailed progress should be included in the answer.:",
      "requirement 1: description of the requirement",
      "achieved: True/False",
      "double-checked: True/False",
      "detailed progress: your analysis"
    ]
  },
  "Organizing": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Task description: \"{description}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Requirements analysis: \"{requirements}\"",
      "Ideas:\"{ideas}\"",
      "Coding plan: \"{codes}\"",
      "Your goal is to organize a coding team to complete the software development task.",
      "There are two default tasks: ",
      "1) log the user's actions and events in a game.log file according to the task requirements in the write format! Be careful and make sure to maintain the game.log file right! The log should happened after the action is taken, record the most recent state.",
      "2) create a user interface (GUI) for the game using the programming language and the requirements analysis. The GUI should be beautiful and user-friendly.",
      "Besides these tasks, you should pay attention to the unachieved requirements and think step by step to formulate the requirements into concrete tasks.",
      "You should follow the following format: \"COMPOSITION\" is the composition of tasks, and \"Workflow\" is the workflow of the programmers. Each task is assigned to a programmer, and the workflow shows the dependencies between tasks. ",
      "### COMPOSITION",
      "```",
      "Task 1: Task 1 description",
      "Task 2: Task 2 description",
      "```",
      "### WORKFLOW",
      "```",
      "Task 1: []",
      "Task 2: [Task 1]",
      "```",
      "Please note that the decomposition should be both effective and efficient.",
      "1) Each decomposed task should include the related the functions. The task description should be clear and concise. ",
      "2) The composition should be kept as small as possible! (NO MORE THAN \"{num_agents}\"). If there are more than 5 tasks, consider merging the tasks and focus on the most essential features. ",
      "3) The decomposed tasks should fully cover the task definitions.",
      "4) The workflow should not contain circles!"
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
      "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
      "'''",
      "button_1.png: The button with the number \"1\" on it.",
      "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
      "background.png: the background color to decorate the Go game",
      "'''",
      "Now, list all functionally independent elements as much as possible."
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
      "{images}",
      "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
    ]
  },
  "SubCodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sub-Task description: \"{subtask}\"",
      "Codes:",
      "\"{codes}\"",
      "Unimplemented File:",
      "\"{unimplemented_file}\"",
      "Your first think step by step first reason yourself about the files and functions related to the sub-task.",
      "Then you should output the COMPLETE code content in each file. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "\nImplementation Requirements:",
      "1. As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all functions which are related to the subtask.",
      "2. If the function is implemented, recheck the logic and log to ensure the targeted feature is fully achieved",
      "3. Important: that both the logic and log should be fully functional! No placeholder (such as 'pass' in Python), strictly following the required format. You must strictly following the required format. You must strictly following the required format.",
      "4. Ensure the functions are consistent among different files, and correctely imported.",
      "\nAdditional Note:",
      "1. The code you generate must prioritize the main task over the sub-task. If there are inconsistencies between the sub-task and the task description, follow the task description strictly. For example, the event type and log format should strictly follow the task.",
      "2. Specific instructions: Use pygame.KEYDOWN instead of pygame.key.get_pressed(), and Avoid using the logging library for logging events; stick to the logging format provided in the task."
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Unimplemented File:",
      "\"{unimplemented_file}\"",
      "In our software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format."
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the new user's task and our software designs: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes:",
      "\"{codes}\"",
      "As the {assistant_role}, to make the software directly operable without further coding, ChatDev have formulated the following regulations:",
      "1) all referenced classes should be correctly imported;",
      "2) all methods should be implemented;",
      "3) all methods need to have the necessary comments;",
      "4) no potential bugs;",
      "5) no images, videos, or other media files should be included in the software unless it is included in the created executable folder;",
      "6) The entire project conforms to the tasks proposed by the user;",
      "7) distinguish the upper or lower case of the imported file name;",
      "8) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "TestOrganizing": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "According to the software requirements listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Your goal is to organize a testing team to complete the software development task.",
      "There are four default tasks: ",
      "1) carefully test the logging mechanism according to the task requirements! The log should happened immediately after the action is taken, record the most recent state. Remember the logging order is very important, record basic operation first then record the subsequent events. Ensure the data format, keys and values are accurate and right! Pay attention to the nested data type and carefully check each element.",
      "2) test the logging mechanism for the special triggered conditions.",
      "3) test the value initialziation required by the task are correctly achieved, pay attention to the corrdinates.",
      "4) test the function inputs and the global variable are imported in each functions, ensure the input values and global variable used in the function are valid and involved when the function is called.",
      "5) test each event in the task is implemented and that the logic triggered matches the conditions in the task description.",
      "Follow the format: \"COMPOSITION\" is the composition of tasks, and \"Workflow\" is the workflow of the programmers. ",
      "### COMPOSITION",
      "```",
      "Task 1: Task 1 description",
      "Task 2: Task 2 description",
      "```",
      "### WORKFLOW",
      "```",
      "Task 1: []",
      "Task 2: [Task 1]",
      "```"
    ]
  },
  "TestExecution": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our software requirements and developed source codes are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "requirement: \"{requirements}\"",
      "The execution outcome of our source codes is:",
      "\"{execution_test_reports}\"",
      "According to the source code, requirements and the execution outcome, please do the following things:",
      "1) If there exists bugs in the execution report, try to modify the code to fix bugs.",
      "2) If you have modify any code, ignore the point 3).",
      "3) If the execution report shows that the codes run successfully, you should only answer: The software run successfully without errors.",
      "The output must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language,\"REQUIREMENTS\" is the targeted requirement of the test case, and \"CODE\" is the test code that is used to test the specific requirement of the file. Format:\n",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "REQUIREMENTS",
      "'''",
      "CODE",
      "```",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "SubTestErrorLocate": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our software requirements and developed source codes are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Testing Task description: \"{subtask}\"",
      "According to Testing Task description, please write test cases to locate the bugs, note that logging is important, ensure the content and format is right. ",
      "You should first locate the functions that need to be tested and write the test cases for them according to the testing task description.",
      "The output must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is \"{test_file_name}\", \"LANGUAGE\" in the programming language,\"REQUIREMENTS\" is the targeted requirement of the test case, and \"CODE\" is the test code that is used to test the specific requirement of the file. Format:\n",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "REQUIREMENTS",
      "'''",
      "CODE",
      "```",
      "You will start with the \"{test_file_name}\" and finish the code follows in the strictly defined format.",
      "Please note that:",
      "1) The code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python).",
      "2) You should not write anything about log testing unless testing task description clearly state that the logs need to be tested",
      "3) You should write the test file with 'unittest' python library.",
      "4) You should not modify the source code, only write the test code. Very Important!"

    ]
  },
  "TestErrorLocate": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our software requirements, developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Requirements: \"{requirements}\"",
      "Source Codes:",
      "\"{codes}\"",
      "According to requirements, please write test cases to locate the bugs, note that logging is important, ensure the content and format is right.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"REQUIREMENTS\" is the targeted requirement of the test case, and \"CODE\" is the test code that is used to test the specific requirement of the file. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "REQUIREMENTS",
      "'''",
      "CODE",
      "```",
      "You will start with the \"test\" file, then go to the ones that are imported by that file, and so on.",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "User requirement:",
      "\"{task}\"",
      "Source Codes:",
      "\"{codes}\"",
      "The execution outcome of our source codes:",
      "\"{test_reports}\"",
      "We also have write test case to test our source codes, our test codes are listed below: ",
      "\"{test_codes}\"",
      "And the execution outcome of our test codes is: ",
      "\"{testcase_reports}\"",
      "According to these imformation, please analyze the source code, test code and execution reports. Make sure your analysis aligns with the source code and user requirements.",
      "First, determine whether the error is caused by incorrect test code; if so, respond \"Wrong test code.\" The wrong type of test code includes not matching the user requirement, e.g. wrong value of the test reference answer conflict with user requirement desciption or improper use of source code. Please be careful and not make wrong judgment about the source code.",
      "Second, if there exist bugs in the source code, give a detailed analysis of the problem. Your answer MUST follow the format below:",
      "file name:file_1.py",
      "function name: function_1, function_2",
      "detailed analysis of the problem: your analysis",
      "file name:file_2.py",
      "function name: function_3, function_4",
      "detailed analysis of the problem: your analysis",
      "Your answer should also follow the requirements below:",
      "1) The answer should only include the analysis of the wrong source code. If all the reports show that there is no bugs in source codes and test codes, you should just only reply: No error in codes.",
      "2) You can answer more than one function name, but you can only answer one file name each time. If you want to answer two file names, you should split it and answer with the format respectively.(Answer the file_1.py and corresponding information with the format, and then answer the file_2.py and corresponding information with the format)",
      "3) You may include one or more function names in each file, but you should not include the same function name in different files.",
      "4) You should not answer anything about test file(e.g. file name: test_requirement_0.py) in your answer. VERY IMPORTANT!"
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the COMPLETE original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary. Now, use the format exemplified above and modify the problematic codes based on the error summary. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "TestModificationOneFile": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "I will give you the source code of a python file, a test file and the executation report of the test file",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{code_to_modify}\"",
      "Our test file:",
      "\"{test_codes}\"",
      "The executation outcome of our source codes is:",
      "\"{test_reports}\"",
      "The executation outcome of test codes is:",
      "\"{testcase_reports}\"",
      "And the analysis is:",
      "\"{detailed_analysis}\"",
      "According to the information above, please modify \"{file_name_to_modify}\" to fix the bugs, pay more attention to function \"{function_to_modify}\"",
      "You should only modify \"{file_name_to_modify}\", if the error in exectation report is related with other files, ignore it. You just need to fix the bugs that can be fixed by only modifying \"{file_name_to_modify}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```"
    ]
  },
  "Updating": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "You are now a organization fine-tuner for the software development process. ",
      "Your task is to update the coding agent teams to ensure that the software requirements can be achieved.",
      "The overall requirements, current coding agent teams, and the issues in current implementation of the software are listed below: ",
      "Task and user requirements: \"{task}\".",
      "Requirements: \"{requirements}\"",
      "Coding team composition: \"{composition}\".",
      "Coding team workflow: : \"{workflow}\".",
      "Source Codes: \"{codes}\"",
      "Execution Results: \"{test_reports}\" (Note: These results only indicate whether the code has runtime errors and do not reflect functionality correctness.)",
      "Current Issues:\n \"{issues}\".",
      "\nAs the {assistant_role}, you should give out a detailed plan to update the coding agent teams to ensure that the software requirements can be achieved.",
      "You should first think step by step, reasoning about Requirements, Source Codes, Execution Results, and Current Issues to decide whether the source code has fully accomplished the coding requirements. If here has any conflict, please refer to the Task and user requirements in checking the source code.",
      "Then according to the requirement assessment, you should update the coding agent teams to ensure that the software requirements can be achieved. You can take following actions:",
      "1) Modify the existing coding agent prompts to focus on fixing runtime errors first, then work on completing and perfecting the tasks. Each task should clearly define the issues the agent is expected to solve.",
      "2) Delete coding agents from the WORKFLOW whose requirements have been achieved.",
      "3) Add new coding agent teams in the composition and workflow to ensure that the unimplemented requirements can be achieved.",
      "\nThe requirement assessment should follow the \"REQUIREMENTS PROGRESS\" format: \"achieved\" represents whether the requirement has been achieved, and \"double-checked\" represents whether the requirement has been double-checked. The detailed progress should be included in the answer.",
      "While the updated coding agent team should be in the following format: \"COMPOSITION\" is the composition of programmers' tasks, and \"Workflow\" is the workflow of the programmers. Each task is assigned to a programmer, and the workflow shows the dependencies between programmers' tasks. ",
      "\n### REQUIREMENTS PROGRESS ",
      "requirement: description of the requirement",
      "achieved: True/False",
      "double-checked: True/False",
      "detailed progress: your analysis",
      "\n### COMPOSITION",
      "```",
      "Programmer 1: Task 1 description - includes specific issues to resolve, necessary code modifications, and expected improvements",
      "Programmer 2: Task 2 description - includes specific issues to resolve, necessary code modifications, and expected improvements",
      "```",
      "### WORKFLOW",
      "```",
      "Programmer 1: []",
      "Programmer 2: [Programmer 1]",
      "```",
      "Please note that the coding team should be both effective and efficient.",
      "1) Prioritize fixing runtime errors before addressing requirement issues.",
      "2) Remove the agent from the origin Coding team workflow if the task has been fully completed.",
      "3) The overall tasks should fully cover all uncomplished requirement and current issues. Make sure the Task description as detail as possible. And NEVER include task that modifiy the code to satistify the testing.",
      "4) The composition are not limited to 2 agents. But if there are more than 10 tasks, consider merging the tasks and focus on the most essential features.",
      "5) The workflow should not contain circles!"
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "The new user's task and our developed codes are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
    ]
  },
  "Manual": {
    "assistant_role_name": "Chief Product Officer",
    "user_role_name": "Chief Executive Officer",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Ideas: \"{ideas}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
      "Please fill out this form and we'll set up a dedicated support Slack channel.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
      "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
      "**❓ Question Answering over specific documents**",
      "- Documentation",
      "- End-to-end Example: Question Answering over Notion Database",
      "**🤖 Agents**",
      "- Documentation",
      "- End-to-end Example: GPT+WolframAlpha",
      "## 📖 Documentation",
      "Please see [here](https://python.langchain.com) for full documentation on:",
      "- Getting started (installation, setting up the environment, simple examples)",
      "- How-To examples (demos, integrations, helper functions)",
      "- Reference (full API docs)",
      "- Resources (high-level explanation of core concepts)",
      "```"
    ]
  }
}